# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:          
  build:

    runs-on: ubuntu-latest

    steps:
    - name: setup sqlite
    - uses: actions/checkout@v4
      with:
        sqlite-version: 3.40.0
        sqlite-year: 2022
    - run: sqlite3 todo.db "create table toDo (id uuid PRIMARY KEY, title TEXT, description TEXT, created_at DATETIME NOT NULL, updated_at DATETIME, deleted BIT default 0, done BIT default 0); create index title_index on toDo(title);"
    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        # Install a specific version of uv.
        version: "0.7.15"
    - name: Enable caching
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true

    - uses: actions/checkout@v4
    - name: Set up Python 3.13
      uses: actions/setup-python@v3
      with:
        python-version: "3.13"
    - name: Install dependencies
      run: |
        cd backend 
        uv sync --locked --all-extras --dev
    - name: Lint
      run: |
        # stop the build if there are Python syntax errors or undefined names
        cd backend 
        uv run pylint app/*py --exit-zero
    - name: Test with pytest
      run: |
        cd backend
        uv run pytest tests/* --junitxml=junit/test-results.xml
    - name: Upload pytest test results
      uses: actions/upload-artifact@v4
      with:
          name: pytest-results
          path: junit/test-results.xml
        # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}
